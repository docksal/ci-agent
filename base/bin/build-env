#!/bin/bash -eo pipefail

# Configures build environment variables
# This file should be sources at the beginning of a build
#
# Usage: source build-env

# IMPORTANT: This script is sourced in the build environment.
# Any settings set here using set/trap/etc. will propagate to all build steps.

# Ensure this script is sourced
# Credit: https://stackoverflow.com/a/28776166
(return 0 2>/dev/null) || (echo "This script must be sourced! (source build-env)"; exit 1)

# -------------------- Constants -------------------- #

DEBUG=${DEBUG:-0}  # `DEBUG=1 build-env` to run with debugging turned ON
DOCKER_HOST_TUNNEL=localhost:2374
GIT_USER_EMAIL=${GIT_USER_EMAIL:-ci@docksal.io}
GIT_USER_NAME=${GIT_USER_NAME:-Docksal CI}

# These are used to generate the sandbox sub-domain (branch-project.example.com)
# There is a limit of 63 characters for any part (label) of the domain name.
# A sandbox URL is <service>--<branch>--<repo>.example.com
# branch is 20 + 4 (for the md5 suffix), repo is 20, delimiters (--) are 2 + 2, which leaves 15 for service part
BRANCH_NAME_LENGTH_LIMIT=${BRANCH_NAME_LENGTH_LIMIT:-20}
REPO_NAME_LENGTH_LIMIT=${REPO_NAME_LENGTH_LIMIT:-20}

# -------------------- Functions -------------------- #

# Print messages only when debugging in ON
echo_debug ()
{
	# Make sure this is wrapped in an "if" statement or it will through "exit 1" on "false" and fail the script
	if [[ "$DEBUG" != 0 ]]; then echo "$@"; fi
}

# Generates a domain name safe string (alphanumeric characters and hyphens).
# Invalid characters are replaced with hyphens.
# The resulting string is converted to lowercase, since browsers are doing this automatically.
safe_string ()
{
	(sed -e 's/[^A-Za-z0-9]/-/g' | awk '{print tolower($0)}') <<< "$1"
}

# Parses repo URL and return a specific chunk
# @url Git repo URL
# @chunk one of: protocol, separator, hostname, service, owner, repo
parse_repo_url ()
{
	url="$1"
	chunk="$2"

	# Credit: https://serverfault.com/questions/417241/extract-repository-name-from-github-url-in-bash/917253#917253
	re="^(https|git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+).git$"
	# Parse the URL
	if [[ ${url} =~ ${re} ]]; then
		protocol=${BASH_REMATCH[1]}
		separator=${BASH_REMATCH[2]}
		hostname=${BASH_REMATCH[3]}
		owner=${BASH_REMATCH[4]}
		repo=${BASH_REMATCH[5]}

		# Derived values
		[[ "$hostname" == "github.com" ]] && service="github"
		[[ "$hostname" == "bitbucket.org" ]] && service="bitbucket"
	else
		return 1
	fi

	# Return the requested chunk
	if [[ "$chunk" != "" ]]; then echo "${!chunk}"; fi
}

# Initial build environment configuration
build_env ()
{
	# Drop variables with "null" values
	# This allows, at the project level, unsetting build variables set at the org level
	if empty_vars="$(env | grep '=null$' | cut -d = -f 1)"; then
		while read -r i; do
			echo_debug "Dropping the '${i}' variable with a 'null' value..."
			unset ${i};
		done <<< "${empty_vars}"
	fi

	# Support for Bitbucket Pipelines
	if [[ "$BITBUCKET_REPO_SLUG" != "" ]]; then
		echo_debug "Detected Bitbucket Pipelines build environment"
		export BITBUCKET_CI="true"
		export GIT_REPO_SERVICE="bitbucket"
		export GIT_REPO_OWNER="$BITBUCKET_REPO_OWNER"
		export GIT_REPO_NAME="$BITBUCKET_REPO_SLUG"
		export GIT_REPO_URL="git@bitbucket.org:$GIT_REPO_OWNER/$GIT_REPO_NAME.git"
		export GIT_BRANCH_NAME="$BITBUCKET_BRANCH"
		export GIT_COMMIT_HASH="$BITBUCKET_COMMIT"
		# Bitbucket Pipelines does not work with PRs
		#GIT_PR_NUMBER=?

		export BUILD_ID="$BITBUCKET_BUILD_NUMBER"
		export BUILD_DIR="$BITBUCKET_CLONE_DIR"
	fi

	# Support for CircleCI 2.0
	if [[ "$CIRCLECI" != "" ]]; then
		echo_debug "Detected CircleCI build environment"
		export GIT_REPO_OWNER="$CIRCLE_PROJECT_USERNAME"
		export GIT_REPO_NAME="$CIRCLE_PROJECT_REPONAME"
		export GIT_REPO_URL="$CIRCLE_REPOSITORY_URL"
		export GIT_BRANCH_NAME="$CIRCLE_BRANCH"
		export GIT_COMMIT_HASH="$CIRCLE_SHA1"

		if [[ "$CIRCLE_REPOSITORY_URL" == *"github.com"* ]]; then
			export GIT_REPO_SERVICE="github"
			# Figure out the pull request number
			# Cannot use $CIRCLE_PR_NUMBER as it's only available in forked PR builds
			export GIT_PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
		fi
		if [[ "$CIRCLE_REPOSITORY_URL" == *"bitbucket.org"* ]]; then
			export GIT_REPO_SERVICE="bitbucket"
			# Figure out the pull request number
			# Cannot use $CIRCLE_PR_NUMBER as it's only available in forked PR builds
			export GIT_PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
		fi

		export BUILD_ID="$CIRCLE_BUILD_NUM"
		export BUILD_DIR="$CIRCLE_WORKING_DIRECTORY"
	fi

	# Support for GitLab 9.0+
	if [[ "$GITLAB_CI" != "" ]]; then
		echo_debug "Detected GitLabCI build environment"
		export GIT_REPO_SERVICE="gitlab"
		export GIT_REPO_OWNER="$CI_PROJECT_NAMESPACE"
		export GIT_REPO_NAME="$CI_PROJECT_NAME"
		export GIT_REPO_URL="$CI_REPOSITORY_URL"
		export GIT_BRANCH_NAME="$CI_COMMIT_REF_NAME"
		export GIT_COMMIT_HASH="$CI_COMMIT_SHA"
		export GIT_PR_NUMBER="$CI_MERGE_REQUEST_ID"

		export BUILD_ID="$CI_JOB_ID"
		export BUILD_DIR="$CI_PROJECT_DIR"
	fi

	# Support for Jenkins Git SCM
	if [[ "$JENKINS_URL" != "" ]]; then
		echo_debug "Detected Jenkins build environment"
		export JENKINS_CI="true"
		export GIT_REPO_SERVICE=$(parse_repo_url "$GIT_URL" service)
		export GIT_REPO_OWNER=$(parse_repo_url "$GIT_URL" owner)
		export GIT_REPO_NAME=$(parse_repo_url "$GIT_URL" repo)
		export GIT_REPO_URL="$GIT_URL"
		export GIT_BRANCH_NAME="$GIT_BRANCH"
		export GIT_COMMIT_HASH="$GIT_COMMIT"

		export BUILD_ID="$BUILD_ID"
		export BUILD_DIR="$WORKSPACE"
	fi

	# Support for GitHub Actions
	if [[ "$GITHUB_ACTIONS" != "" ]]; then
	  echo_debug "Detected Github Actions build environment"
	  export HOME=$AGENT_HOME
	  export GIT_REPO_OWNER="$GITHUB_REPOSITORY_OWNER"
	  export GIT_REPO_NAME="${GITHUB_REPOSITORY##*/}"
	  export GIT_REPO_URL="git@github.com:$GIT_REPO_OWNER/$GIT_REPO_NAME.git"
	  export GIT_BRANCH_NAME="$GITHUB_REF_NAME"
	  export GIT_COMMIT_HASH="$GITHUB_SHA"

	  if [[ "$GITHUB_SERVER_URL" == *"github.com"* ]]; then
	    export GIT_REPO_SERVICE="github"
	    export GIT_PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
	  fi

	  export BUILD_ID="$GITHUB_RUN_NUMBER"
	  export BUILD_DIR="$GITHUB_WORKSPACE"
	fi

	# For debug purposes these variables can be set manually.
	# If they are empty here, then we cannot proceed.
	if [[ "$GIT_REPO_URL" == "" ]] || [[ "$GIT_BRANCH_NAME" == "" ]] || [[ "$GIT_COMMIT_HASH" == "" ]]; then
		echo "Unsupported build environment! Quiting..."
		exit 1
	fi

	# URL safe branch name
	BRANCH_NAME_SAFE="$(safe_string ${GIT_BRANCH_NAME})"
	# Trim the branch name if longer than BRANCH_NAME_LENGTH_LIMIT and append the md5sum to keep the branch name unique.
	if (( "${#BRANCH_NAME_SAFE}" > "$BRANCH_NAME_LENGTH_LIMIT" )); then
		BRANCH_NAME_SAFE="$(echo -n "$BRANCH_NAME_SAFE" | cut -c1-${BRANCH_NAME_LENGTH_LIMIT})-$(echo -n "$BRANCH_NAME_SAFE" | md5sum | cut -c1-3)"
	fi
	export BRANCH_NAME_SAFE

	# Trim repo name if longer than REPO_NAME_LENGTH_LIMIT.
	export REPO_NAME_SAFE="$(safe_string ${GIT_REPO_NAME:0:${REPO_NAME_LENGTH_LIMIT}})"
	# Short version of GIT_COMMIT_HASH
	export COMMIT_HASH_SHORT="${GIT_COMMIT_HASH:0:7}"

	# Sandbox settings
	# Defaults for the sandbox user and builds directory: "build-agent" and "/home/build-agent/builds" respectively.
	export DOCKSAL_HOST_USER="${DOCKSAL_HOST_USER:-build-agent}"
	export REMOTE_BUILD_BASE=${REMOTE_BUILD_BASE:-/home/${DOCKSAL_HOST_USER}/builds}
	export REMOTE_BUILD_DIR="${REMOTE_BUILD_BASE}/$REPO_NAME_SAFE-$BRANCH_NAME_SAFE"
	export COMPOSE_PROJECT_NAME="$REPO_NAME_SAFE-$BRANCH_NAME_SAFE"
	export DOCKER_STACK_NAME="$REPO_NAME_SAFE-$BRANCH_NAME_SAFE"

	# Use DOCKSAL_HOST (domain name) if set, otherwise use DOCKSAL_HOST_IP (IP) with nip.io
	export DOCKSAL_HOST="${DOCKSAL_HOST:-$DOCKSAL_HOST_IP.nip.io}"
	sed -i "s/HostName DOCKSAL_HOST/HostName $DOCKSAL_HOST/g" $HOME/.ssh/config

	# Use DOCKSAL_HOST_SSH_PORT if set, otherwise use default ssh port (22)
	export DOCKSAL_HOST_SSH_PORT="${DOCKSAL_HOST_SSH_PORT:-22}"
	sed -i "s/# Port DOCKSAL_HOST_SSH_PORT/Port $DOCKSAL_HOST_SSH_PORT/g" $HOME/.ssh/config

	# Set the sandbox user name in agent's SSH config
	sed -i "s/User DOCKSAL_HOST_USER/User $DOCKSAL_HOST_USER/g" $HOME/.ssh/config

	# If a custom domains was not set via agent's build environment, derive the domain from the branch name.
	if [[ "$SANDBOX_DOMAIN" == "" ]]; then
		# Allow setting DOCKSAL_DOMAIN individually from DOCKSAL_HOST. Default to DOCKSAL_HOST if not set.
		# This is useful when working with CDNs/ELBs/WAFs/etc (when DOCKSAL_DOMAIN is different from the DOCKSAL_HOST).
		# Make sure domain name is lowercase
		export DOCKSAL_DOMAIN="$(echo -n ${DOCKSAL_DOMAIN:-$DOCKSAL_HOST} | awk '{print tolower($0)}')"

		# Use "flat" sub-domains (e.g. branch--project.example.com) and not multi-sub-domains (e.g. branch.project.example.com)
		# This allows using a single wildcard cert for the entire sandbox server.
		# Note: A wildcard cert for "*.example.com", will only cover "sub-domain.example.dom", but not
		# "www.sub-domain.example.com".
		# NOTE: The length of any one label (sub-domain) in the domain name is limited to 63 octets (characters).
		export SANDBOX_DOMAIN="${BRANCH_NAME_SAFE}--${REPO_NAME_SAFE}.${DOCKSAL_DOMAIN}"
	fi
	# Backward compatibility with ci-agent versions prior to 1.6.1.
	# This variable may be used in custom Slack notifications.
	export DOMAIN="$SANDBOX_DOMAIN"

	# Default to rsync for sandbox codebase initialization
	export REMOTE_CODEBASE_METHOD="${REMOTE_CODEBASE_METHOD:-rsync}"
}

# Configure SSH keys
# Note: CircleCI injects it's own key during checkout.
# Since this scripts is supposed to be sourced for every run command, the keys will be reset back to our values.
ssh_init ()
{
	mkdir -p $HOME/.ssh

	# Default key used for all hosts
	if [[ "$CI_SSH_KEY" != "" ]]; then
		echo "$CI_SSH_KEY" | base64 -d > $HOME/.ssh/id_rsa
		chmod 0600 $HOME/.ssh/id_rsa
		ssh-keygen -y -f $HOME/.ssh/id_rsa > $HOME/.ssh/id_rsa.pub
	fi

	# Docksal Sandbox server key
	if [[ "$DOCKSAL_HOST_SSH_KEY" != "" ]]; then
		echo "$DOCKSAL_HOST_SSH_KEY" | base64 -d > $HOME/.ssh/docksal_host_id_rsa
		chmod 0600 $HOME/.ssh/docksal_host_id_rsa
		ssh-keygen -y -f $HOME/.ssh/docksal_host_id_rsa > $HOME/.ssh/docksal_host_id_rsa.pub
	fi

	# Initialize ssh-agent and load the default key ($HOME/.ssh/id_rsa)
	# Check whether ssh-agent is configured
	ssh-add -l &>/dev/null || ret=$?
	# If ssh-agent is not configured, but config file exists, attempt to load agent settings from the file
	if [[ "${ret}" == 2 ]] && [[ -f $HOME/.ssh/agent ]]; then
		eval "$(<$HOME/.ssh/agent)" >/dev/null
	fi
	# Check whether ssh-agent is configured again
	ssh-add -l &>/dev/null || ret=$?
	# If the existing config was invalid, start a new agent and write new config
	if [[ "${ret}" == 2 ]]; then
		ssh-agent > $HOME/.ssh/agent
		chmod 0600 $HOME/.ssh/agent
		eval "$(<$HOME/.ssh/agent)" >/dev/null
	fi
	# Load default keys into the ssh-agent if available
	ssh-add &>/dev/null || true
}

# Configure preferred git settings
git_env ()
{
	# Only set these if not already configured
	if [[ "$(git config --global user.email)" == "" ]] && [[ "$GIT_USER_EMAIL" != "" ]]; then
		git config --global user.email "$GIT_USER_EMAIL"
	fi
	if [[ "$(git config --global user.name)" == "" ]] && [[ "$GIT_USER_NAME" != "" ]]; then
		git config --global user.name "$GIT_USER_NAME"
	fi
}

# Support running docker commands (locally to the agent) on the sandbox server (remote Docker engine)
ssh_tunnel_init ()
{
	# Check if the tunnel is already active and return if so
	ssh -O "check" docker-host >/dev/null 2>&1
	[[ $? == 0 ]] && return 0

	echo "Setting up a secure tunnel to the Docker Engine on $DOCKSAL_HOST..."
	# Black magic! Remote docker.sock access over SSH tunnel
	# Credits:
	# https://docs.docker.com/docker-for-aws/deploy/#connecting-via-ssh
	# https://gist.github.com/scy/6781836#gistcomment-1559506
	ssh -fM -NL ${DOCKER_HOST_TUNNEL}:/var/run/docker.sock docker-host

	echo "Querying Docker Engine..."
	docker --host ${DOCKER_HOST_TUNNEL} version
	return $?
}

# -------------------- Runtime -------------------- #

echo_debug "Configuring build settings..."
build_env

echo_debug "Configuring ssh access..."
ssh_init

# Configure git
echo_debug "Configuring git settings..."
git_env

# Sandbox server settings
echo_debug "Configuring sandbox server settings..."
# Initialize a tunnel to the Docker Engine on DOCKSAL_HOST
# Export local tunnel connection settings if it works
# Using full "if" form instead of the short one here, otherwise build fails, when the condition below is false
if [[ "$DOCKSAL_HOST_TUNNEL" != "" ]]; then
	ssh_tunnel_init && export DOCKER_HOST=${DOCKER_HOST_TUNNEL}
fi
